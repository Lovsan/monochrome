const CATEGORY_DESCRIPTION = 'The following subcategories and settings are available. Type the number of the one you want to see/change.';

function isCategory(settingsTreeNode) {
  return !!settingsTreeNode.children;
}

function createFieldsForChildren(children) {
  const categories = [];
  const settings = [];

  for (const child of children) {
    if (isCategory(child)) {
      categories.push(child);
    } else {
      settings.push(child);
    }
  }

  let optionNumber = 0;

  const categoriesString = categories.map(category => {
    optionNumber += 1;
    return `${optionNumber}. ${category.userFacingName}`;
  }).join('\n');

  const settingsString = settings.map(setting => {
    optionNumber += 1;
    return `${optionNumber}. ${setting.userFacingName}`;
  }).join('\n');

  const fields = [];
  if (categoriesString) {
    fields.push({ name: 'Subcategories', value: categoriesString });
  }
  if (settingsString) {
    fields.push({ name: 'Settings', value: settingsString });
  }

  return fields;
}

function createResponseForRoot(children, color) {
  return {
    embed: {
      title: 'Settings',
      description: CATEGORY_DESCRIPTION,
      fields: createFieldsForChildren(children),
      color: color,
    },
  };
}

function createResponseForCategory(category) {

}

function createResponseForSetting(setting) {

}

function createResponseForTreeNode(title, settingsTreeNode) {
  const nodeIsCategory = isCategory(settingsTreeNode);

  if (nodeIsCategory) {
    return createResponseForCategory(settingsTreeNode);
  } else {
    return createResponseForSetting(settingsTreeNode);
  }
}

function execute(monochrome, msg, suffix, color) {
  const settingsManager = monochrome.getSettings();
  const settingsTree = settingsManager.getRawSettingsTree();

  return msg.channel.createMessage(createResponseForRoot(settingsTree, color));
}

class SettingsCommand {
  constructor(config) {
    this.commandAliases = config.settingsCommandAliases;
    this.embedColor_ = config.colorForSettingsSystemEmbeds;
    this.uniqueId = 'autoGeneratedSettings425654';
    this.action = (erisBot, monochrome, msg, suffix) => execute(monochrome, msg, suffix, config.colorForSettingsSystemEmbeds);
  }
}

module.exports = SettingsCommand;
